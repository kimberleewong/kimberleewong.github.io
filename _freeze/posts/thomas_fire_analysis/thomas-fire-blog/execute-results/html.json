{
  "hash": "89b68e837e532ff771603f318bdd9d0c",
  "result": {
    "markdown": "---\ntitle: Analysis of the 2017 Thomas Fire\ndescription: This project's goal is to visually explore the region affected by the Thomas Fire across Ventura and Santa Barbara counties in 2017.\nauthor:\n  - name: Kimmy Wong\n    url: 'https://kimberleewong.github.io/'\n    affiliation: MEDS\n    affiliation-url: 'https://bren.ucsb.edu/masters-programs/master-environmental-data-science'\ndate: '2024-12-04'\ncategories:\n  - Python\n  - MEDS\n  - Spatial-Analysis\n  - Quarto\ncitation:\n  url: 'https://kimberleewong.github.io/posts/thomas_fire_analysis/thomas-fire-blog.html'\ntoc: true\nimage: thomas_fire.jpeg\ndraft: false\n---\n\n# Thomas Fire Analysis\n\nAuthor: Kimberlee Wong\n\nLink to [Website]( https://kimberleewong.github.io/)\n\nLink to [Repository](https://github.com/kimberleewong/thomas_fire_analysis)\n\n## About\n\n### Purpose\n\nThe following analysis was done in two-fold. Its purpose is to get a better understanding of the 2017 Thomas Fire that affected Ventura and Santa Barbara Counties. The first part shows the process of producing a graph that shows how the average air quality was affected, and the second part visualizes the region of fire through a false imagery map.\n\n### Highlights\n\n-   Use `rioxr` to import the landsat data and access its attribute\n-   Visualize both true and false color images\n-   Combining two different datasets to make one map\n\n### About the Data\n\nThe landsat data comes from Microsoft Planetary Computer Data Catalogue, and it is a simplified collection of colored bands. It was processed to remove data outside land and coarsen the spatial resolution.\n\nThe Thomas Fire boundary was created in the previous notebook by filtering a California Fire perimeter file available from the US Government Data Catalogue.\n\n### References\n\nMicrosoft Planetary Computer Data Catalogue, Landsat collection 2 Level-2 \\[Data file\\] Available from: https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2. Access date: November, 2024.\n\nData.gov Data Catalogue, California Fire Perimeters (all) \\[Data file\\] Available from: https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436. Access date: November, 2024.\n\nAQI Data: https://aqs.epa.gov/aqsweb/airdata (Accessed October, 2024)\n\n## Import Libraries\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show code\"}\nimport pandas as pd\nimport geopandas as gpd\nimport os\nimport matplotlib.pyplot as plt\nimport rioxarray as rioxr\nfrom shapely.geometry import box  # To create polygon bounding box\n\npd.set_option(\"display.max.columns\", None) # To see all columns\n```\n:::\n\n\n## Load Data\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# 2017 and 2018 AQI Data # \n\naqi_17 = pd.read_csv('data/daily_aqi_by_county_2017.zip', compression = 'zip')\naqi_18 = pd.read_csv('data/daily_aqi_by_county_2018.zip', compression = 'zip')\n\n# Landsat Data # \n\n# Make a root path\nroot = os.path.join('/',\n                  'courses',\n                  'EDS220',\n                  'data',\n                  'hwk4_landsat_data')\n\n# Make a filepath\nfp = os.path.join(root,\n                 'landsat8-2018-01-26-sb-simplified.nc')\n\n# Use both root and file paths to import the landsat file\nlandsat = rioxr.open_rasterio(fp)\n\n# Thomas Fire Boundary #\nthomas_fire_boundary = gpd.read_file(os.path.join('data', 'thomas_fire_boundary.shp'))\n```\n:::\n\n\n# Santa Barbara AQI Analysis\n\n## Data Cleaning and Manipulation\n\n::: {.cell tags='[]' execution_count=3}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show code\"}\n# Combine 2017 and 2018 data into one dataframe\naqi = pd.concat([aqi_17, aqi_18])\n\n# Clean column names\naqi.columns = (aqi.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n# Select for Santa Barbara county and remove unneccessary columns\naqi_sb = aqi[aqi['county_name'] == 'Santa Barbara'].drop(columns = ['state_name', 'county_name', 'state_code', 'county_code'])\n\n# Convert date to datetime object\naqi_sb.date = pd.to_datetime(aqi_sb.date)\n\n# Change the index to the data\naqi_sb = aqi_sb.set_index('date')\n\n# Calculate AQI rolling average over 5 days\naqi_sb['five_day_average'] = aqi_sb.rolling('5D').aqi.mean()   \n```\n:::\n\n\n## Visualize AQI\n\n::: {.cell execution_count=4}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show code\"}\n# Set figure size\nfig, ax = plt.subplots(figsize=(10, 6))\n\nax.plot(aqi_sb.index, aqi_sb.aqi, label='Daily AQI')\nax.plot(aqi_sb.index, aqi_sb.five_day_average, label='Five Day Average AQI')\nax.set_xlabel('Date')\nax.set_ylabel('AQI')\nax.set_title('Daily and Five Day Average AQI Readings of Santa Barbara County from 2017 to 2018')\nax.legend()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n<matplotlib.legend.Legend at 0x7f9576624310>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](thomas-fire-blog_files/figure-html/cell-5-output-2.png){width=816 height=523}\n:::\n:::\n\n\n# Thomas Fire False Color Imagery Map\n\n## Data Cleaning and Manipulation\n\n::: {.cell execution_count=5}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show code\"}\n# Remove length 1 dimensions (band)\nlandsat = landsat.squeeze()\n\n# Remove coordinates associated to band dimension\nlandsat = landsat.drop_vars('band')\n\n# Check that it worked\nprint(landsat.dims, landsat.coords)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFrozenMappingWarningOnValuesAccess({'x': 870, 'y': 731}) Coordinates:\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\n```\n:::\n:::\n\n\n## True Color Image\n\n::: {.cell tags='[]' execution_count=6}\n``` {.python .cell-code}\n# Visualize the red, green, blue variables\nlandsat[['red', 'green', 'blue']].to_array().plot.imshow()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n<matplotlib.image.AxesImage at 0x7f957680cb10>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](thomas-fire-blog_files/figure-html/cell-7-output-3.png){width=633 height=464}\n:::\n:::\n\n\nThis first attempt at visualizing the landsat data didn't work quite right because it is showing up in black and white. Let's change the robust parameter to account for the clouds' RGB outlier values throwing off the plot.\n\n::: {.cell tags='[]' execution_count=7}\n``` {.python .cell-code}\n# Visualize the red, green, blue variables and adjust robust parameter \nlandsat[['red', 'green', 'blue']].to_array().plot.imshow(robust = True)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n<matplotlib.image.AxesImage at 0x7f957678cd10>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](thomas-fire-blog_files/figure-html/cell-8-output-2.png){width=633 height=464}\n:::\n:::\n\n\nThe first attempt showed up in black and white. By just changing the one parameter of robust, the plot now shows a true color image. The robust parameter essentially changed the colormap range so that the extremes aren't included. Because the clouds were affecting our first map, turning on robust changes that.\n\n## False Color Image\n\nInstead of using the usual RGB (red, green, blue) colors, let's switch them to make a false color image and better visualize the area that was affected by the fire.\n\n::: {.cell tags='[]' execution_count=8}\n``` {.python .cell-code}\n# Visualize the swir22, nir, red variables and keep robust = True\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(robust = True)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n<matplotlib.image.AxesImage at 0x7f9576544410>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](thomas-fire-blog_files/figure-html/cell-9-output-2.png){width=633 height=464}\n:::\n:::\n\n\n## False Color Image Map\n\nCreate a map using the false color image that was made above and the Thomas fire perimeter.\n\n### CRS Manipulation\n\nBecause we're combining two geodata files, we must ensure the CRSs match.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# View each CRS (add code fold here)\nprint('Thomas Fire CRS: ', thomas_fire_boundary.crs)\nprint('landsat CRS: ', landsat.rio.crs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThomas Fire CRS:  EPSG:3857\nlandsat CRS:  EPSG:32611\n```\n:::\n:::\n\n\n::: {.cell tags='[]' execution_count=10}\n``` {.python .cell-code}\n# Change Thomas Fire boundary to match the landsat crs \nthomas_fire_boundary = thomas_fire_boundary.to_crs(landsat.rio.crs)\n\n# Add a check to make sure it worked (if it didn't an error would produce)\nassert thomas_fire_boundary.crs == landsat.rio.crs\n```\n:::\n\n\n### Plot Map\n\n::: {.cell tags='[]' execution_count=11}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show code\"}\n# Required to put the figures on one map\nfig, ax = plt. subplots() \n\n# Plot the false color image as it was earlier\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(robust = True, ax = ax)\n\n# Plot the Thomas Fire perimeter(only)\nthomas_fire_boundary.boundary.plot(ax=ax, edgecolor = \"darkred\", linewidth = 1, label = \"Thomas Fire Perimeter\")\n\n# Add legend\nax.legend(loc='upper right')\n\n# Turn off the axes\nplt.axis(False)\n\n# Add Title\nplt.title(\"False Color Image Map of the 2017 Thomas Fire\")\n\n# Gets rid of the text that shows up over the map of the annotation\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](thomas-fire-blog_files/figure-html/cell-12-output-1.png){width=459 height=409}\n:::\n:::\n\n\nFigure Description: This is a map of Santa Barbara County in the year 2017. It features a layer on top of it that shows the border of the Thomas Fire. This map uses false color imagery (occurs when you replace the original RGB colors with other ones of your choosing. In this instance, instead of red we used short-wave infrared(swir22), instead of green we used near-infrared(nir08), and instead of blue we used red. By doing this, the map clearly shows where the Thomas Fire is. When comparing it to the true color image, you cannot really tell that the region of the Thomas Fire was different. The included border also helps to distinct the fire from the rest of the county.\n\n",
    "supporting": [
      "thomas-fire-blog_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}