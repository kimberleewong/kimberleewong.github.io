[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kimberlee Wong",
    "section": "",
    "text": "Hello! My name is Kimmy Wong, and I’m a master’s student of Environmental Data Science at the UCSB Bren School of Environmental Science and Management. I’m a recently graduated UCLA alum (2024), and it’s there I found an appreciation for data visualization and GIS mapping as tools to address pressing environmental challenges. I’m excited to enhance my skills in modeling, data analysis, and data visualization and apply these competencies to tackling the environmental issues I have been passionate about since volunteering as an education interpreter at the Aquarium of the Pacific in high school."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "some text"
  },
  {
    "objectID": "about.html#what-i-do-for-fun",
    "href": "about.html#what-i-do-for-fun",
    "title": "About",
    "section": "What I do for fun",
    "text": "What I do for fun\n\nwoot woot\n\nhere is more text\n\nhere is line\nmroe line"
  },
  {
    "objectID": "posts/thomas_fire_analysis/thomas-fire-blog.html",
    "href": "posts/thomas_fire_analysis/thomas-fire-blog.html",
    "title": "Analysis of the 2017 Thomas Fire",
    "section": "",
    "text": "An image of firefighters battling the fire as it encroaches on Carpinteria on December 10. Credits: Mike Eliason/Santa Barbara County Fire Department via AP"
  },
  {
    "objectID": "posts/thomas_fire_analysis/thomas-fire-blog.html#about",
    "href": "posts/thomas_fire_analysis/thomas-fire-blog.html#about",
    "title": "Analysis of the 2017 Thomas Fire",
    "section": "About",
    "text": "About\n\nPurpose\nIn December of 2017, multiple wildfires ignited in Southern California, and was dubbed the Thomas Fire. It took months for it to be considered completely out, and at the time, it became the seventh most destructive fire in California history. The following analysis was done in two-fold. Its purpose is to get a better understanding of the 2017 Thomas Fire effects. The first part shows the process of producing a graph that shows how the average air quality was affected, and the second part visualizes the region of fire through a false imagery map.\n\n\nHighlights\n\nClean and Manipulate: Clean column names and remove unnecessary column names for ease.\nVisualize: Produce both true and false image color image maps. Produce a graph showing the average air quality index before, through, and after the Thomas Fire.\nGeospatial Analysis: Use rioxr to import the Landsat data and access its attributes. Use squeeze and drop.vars to remove unnecessary bands and coordinates.\n\n\n\nAbout the Data\nThe Landsat data comes from Microsoft Planetary Computer Data Catalogue, and it is a simplified collection of colored bands. It was processed to remove data outside land and coarsen the spatial resolution.\nThe Thomas Fire boundary was created by filtering a California Fire perimeter file available from the US Government Data Catalogue.\nThe AQI (Air Quality Index) data was created by the US EPA (Environmental Protection Agency), and was filtered down to Santa Barbara County."
  },
  {
    "objectID": "posts/thomas_fire_analysis/thomas-fire-blog.html#import-libraries",
    "href": "posts/thomas_fire_analysis/thomas-fire-blog.html#import-libraries",
    "title": "Analysis of the 2017 Thomas Fire",
    "section": "Import Libraries",
    "text": "Import Libraries\n\n\nShow code\nimport pandas as pd\nimport geopandas as gpd\nimport os\nimport matplotlib.pyplot as plt\nimport rioxarray as rioxr\nfrom shapely.geometry import box  # To create polygon bounding box\n\npd.set_option(\"display.max.columns\", None) # To see all columns"
  },
  {
    "objectID": "posts/thomas_fire_analysis/thomas-fire-blog.html#load-data",
    "href": "posts/thomas_fire_analysis/thomas-fire-blog.html#load-data",
    "title": "Analysis of the 2017 Thomas Fire",
    "section": "Load Data",
    "text": "Load Data\n\n# 2017 and 2018 AQI Data # \n\naqi_17 = pd.read_csv('data/daily_aqi_by_county_2017.zip', compression = 'zip')\naqi_18 = pd.read_csv('data/daily_aqi_by_county_2018.zip', compression = 'zip')\n\n# Landsat Data # \n\n# Make a root path\nroot = os.path.join('/',\n                  'courses',\n                  'EDS220',\n                  'data',\n                  'hwk4_landsat_data')\n\n# Make a filepath\nfp = os.path.join(root,\n                 'landsat8-2018-01-26-sb-simplified.nc')\n\n# Use both root and file paths to import the Landsat file\nlandsat = rioxr.open_rasterio(fp)\n\n# Thomas Fire Boundary #\nthomas_fire_boundary = gpd.read_file(os.path.join('data', 'thomas_fire_boundary.shp'))"
  },
  {
    "objectID": "posts/thomas_fire_analysis/thomas-fire-blog.html#data-cleaning-and-manipulation",
    "href": "posts/thomas_fire_analysis/thomas-fire-blog.html#data-cleaning-and-manipulation",
    "title": "Analysis of the 2017 Thomas Fire",
    "section": "Data Cleaning and Manipulation",
    "text": "Data Cleaning and Manipulation\n\n# Combine 2017 and 2018 data into one dataframe\naqi = pd.concat([aqi_17, aqi_18])\n\n# Clean column names\naqi.columns = (aqi.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n# Select for Santa Barbara county and remove unneccessary columns\naqi_sb = aqi[aqi['county_name'] == 'Santa Barbara'].drop(columns = ['state_name', 'county_name', 'state_code', 'county_code'])\n\n# Convert date to datetime object\naqi_sb.date = pd.to_datetime(aqi_sb.date)\n\n# Change the index to the data\naqi_sb = aqi_sb.set_index('date')\n\n# Calculate AQI rolling average over 5 days\naqi_sb['five_day_average'] = aqi_sb.rolling('5D').aqi.mean()"
  },
  {
    "objectID": "posts/thomas_fire_analysis/thomas-fire-blog.html#visualize-aqi",
    "href": "posts/thomas_fire_analysis/thomas-fire-blog.html#visualize-aqi",
    "title": "Analysis of the 2017 Thomas Fire",
    "section": "Visualize AQI",
    "text": "Visualize AQI\n\n\nShow code\n# Set figure size\nfig, ax = plt.subplots(figsize=(10, 6))\n\nax.plot(aqi_sb.index, aqi_sb.aqi, label='Daily AQI')\nax.plot(aqi_sb.index, aqi_sb.five_day_average, label='Five Day Average AQI')\nax.set_xlabel('Date')\nax.set_ylabel('AQI')\nax.set_title('Daily and Five Day Average AQI Readings of Santa Barbara County from 2017 to 2018')\nax.legend()\n\n\n<matplotlib.legend.Legend at 0x7f6c3824d210>"
  },
  {
    "objectID": "posts/thomas_fire_analysis/thomas-fire-blog.html#data-cleaning-and-manipulation-1",
    "href": "posts/thomas_fire_analysis/thomas-fire-blog.html#data-cleaning-and-manipulation-1",
    "title": "Analysis of the 2017 Thomas Fire",
    "section": "Data Cleaning and Manipulation",
    "text": "Data Cleaning and Manipulation\n\n# Remove length 1 dimensions (band)\nlandsat = landsat.squeeze()\n\n# Remove coordinates associated to band dimension\nlandsat = landsat.drop_vars('band')\n\n# Check that it worked\nprint(landsat.dims, landsat.coords)\n\nFrozenMappingWarningOnValuesAccess({'x': 870, 'y': 731}) Coordinates:\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0"
  },
  {
    "objectID": "posts/thomas_fire_analysis/thomas-fire-blog.html#true-color-image",
    "href": "posts/thomas_fire_analysis/thomas-fire-blog.html#true-color-image",
    "title": "Analysis of the 2017 Thomas Fire",
    "section": "True Color Image",
    "text": "True Color Image\n\n# Visualize the red, green, blue variables\nlandsat[['red', 'green', 'blue']].to_array().plot.imshow()\n\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n\n\n<matplotlib.image.AxesImage at 0x7f6c38557010>\n\n\n\n\n\nThis first attempt at visualizing the Landsat data didn’t work quite right because it is showing up in black and white. Let’s change the robust parameter to account for the clouds’ RGB outlier values throwing off the plot.\n\n# Visualize the red, green, blue variables and adjust robust parameter \nlandsat[['red', 'green', 'blue']].to_array().plot.imshow(robust = True)\n\n<matplotlib.image.AxesImage at 0x7f6c3829bfd0>\n\n\n\n\n\nThe first attempt showed up in black and white. By just changing the one parameter of robust, the plot now shows a true color image. The robust parameter essentially changed the colormap range so that the extremes aren’t included. Because the clouds were affecting our first map, turning on robust changes that."
  },
  {
    "objectID": "posts/thomas_fire_analysis/thomas-fire-blog.html#false-color-image",
    "href": "posts/thomas_fire_analysis/thomas-fire-blog.html#false-color-image",
    "title": "Analysis of the 2017 Thomas Fire",
    "section": "False Color Image",
    "text": "False Color Image\nInstead of using the usual RGB (red, green, blue) colors, let’s switch them to make a false color image and better visualize the area that was affected by the fire. In our specific case, we will be using short-wave infrared(swir22) instead of red, near-infrared(nir08) instead of green, and red instead of blue. We must input the exchange in the order of RGB in order to get the desired effect.\n\n# Visualize the swir22, nir, red variables and keep robust = True\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(robust = True)\n\n<matplotlib.image.AxesImage at 0x7f6c380c9550>"
  },
  {
    "objectID": "posts/thomas_fire_analysis/thomas-fire-blog.html#false-color-image-map",
    "href": "posts/thomas_fire_analysis/thomas-fire-blog.html#false-color-image-map",
    "title": "Analysis of the 2017 Thomas Fire",
    "section": "False Color Image Map",
    "text": "False Color Image Map\nCreate a map using the false color image that was made above and the Thomas fire perimeter.\n\nCRS Manipulation\nBecause we’re combining two geodata files, we must ensure the CRSs match.\n\n# View each CRS\nprint('Thomas Fire CRS: ', thomas_fire_boundary.crs)\nprint('Landsat CRS: ', landsat.rio.crs)\n\nThomas Fire CRS:  EPSG:3857\nLandsat CRS:  EPSG:32611\n\n\n\n# Change Thomas Fire boundary to match the Landsat CRS \nthomas_fire_boundary = thomas_fire_boundary.to_crs(landsat.rio.crs)\n\n# Add a check to make sure it worked \nassert thomas_fire_boundary.crs == landsat.rio.crs\n\n\n\nPlot Map\n\n\nShow code\n# Required to put the figures on one map\nfig, ax = plt. subplots() \n\n# Plot the false color image as it was earlier\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(robust = True, ax = ax)\n\n# Plot the Thomas Fire perimeter(only)\nthomas_fire_boundary.boundary.plot(ax=ax, edgecolor = \"darkred\", linewidth = 1, label = \"Thomas Fire Perimeter\")\n\n# Add legend\nax.legend(loc='upper right')\n\n# Turn off the axes\nplt.axis(False)\n\n# Add Title\nplt.title(\"False Color Image Map of the 2017 Thomas Fire\")\n\n# Gets rid of the text that shows up over the map of the annotation\nplt.show()\n\n\n\n\n\nFigure Description: This is a map of Santa Barbara County in the year 2017. It features a layer on top of it that shows the border of the Thomas Fire. This map uses false color imagery (occurs when you replace the original RGB colors with other ones of your choosing. In this instance, instead of red we used short-wave infrared(swir22), instead of green we used near-infrared(nir08), and instead of blue we used red. By doing this, the map clearly shows where the Thomas Fire is. When comparing it to the true color image, you cannot really tell that the region of the Thomas Fire was different. The included border also helps to distinct the fire from the rest of the county.\n\n\nReferences\nMicrosoft Planetary Computer Data Catalogue, Landsat collection 2 Level-2 [Data file] Available from: https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2. Access date: November, 2024.\nData.gov Data Catalogue, California Fire Perimeters (all) [Data file] Available from: https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436. Access date: November, 2024.\nAQI Data: https://aqs.epa.gov/aqsweb/airdata (Accessed October, 2024)"
  },
  {
    "objectID": "posts/geese_migration/geese_migration_blog.html",
    "href": "posts/geese_migration/geese_migration_blog.html",
    "title": "Shifts in Geese Migration",
    "section": "",
    "text": "Hundreds of snow geese taking off for migration. Credits: Linda Davidson/The Washington Post\n\n\n\n\nHas geese migration distance changed over time?\nUnderstanding the relationship between climate variables and wildlife migration is critical in the context of climate change. Migratory species are often considered indicators of ecosystem health, as they are highly sensitive to environmental changes. Disruptions in their migration patterns could have cascading effects on biodiversity, ecosystem stability, and food webs. As climate change continues to alter temperature, precipitation, and other environmental variables, it is essential to investigate how these changes might influence migration behaviors, including distances traveled.\nPrevious studies have highlighted how factors like temperature and precipitation affect migration timing, routes, and destinations. These changes may lead to earlier or later migrations, altered paths, or shifts in wintering or breeding grounds. However, less attention has been given to changes in total migration distance, which could reflect significant shifts in species behavior or adaptations to changing conditions. Understanding migration distances over time is crucial, as it may offer insights into the energetic demands of migration, habitat availability, and the resilience of species to environmental stressors.\nMy goal in this analysis is to assess whether geese migration distances have changed over time and to examine the potential influence of precipitation as a key climate variable. By analyzing data on migration distances from specific years and integrating climatic data where available, I aim to uncover patterns or trends that might signal broader ecological shifts.\nAdditionally, this study acknowledges some challenges, such as gaps in data across years and potential biases in sample sizes for certain time periods. Recognizing these limitations, the analysis will employ statistical methods like linear regression to evaluate trends and consider the potential impact of precipitation on migration distances. With a better understanding of these patterns, we can contribute to broader efforts to monitor the effects of climate change on migratory species and their ecosystems.\n\n\n\nBased on previous research that describes how environmental factors can influence migration patterns, I believe that there will be a change in geese migration over time. Below shows a table of my two hypotheses, and I will be attempting to determine whether or not they can be rejected.\n\n\n\n\n\n\nHypothesis: There is a change in geese migration distance over time.\n\n\n\n\nNull hypothesis: There is no change in geese migration distance over time.\n\n\n\n\n\n\n\nLoad in data\nClean and manipulate data\nCreate boxplots to visualize distribution\nRun linear regression model\nVisualize linear regression\nAnalyze results\n\n\n\n\nMy data comes from Movebank, a free online database that houses a vast collection of animal tracking data contributed by researchers worldwide. Movebank offers a unique opportunity to study wildlife movement patterns by providing detailed spatial and temporal data for a wide variety of species. My professor, Max Czapanskiy, played a significant role in helping me identify this dataset, exploring the repository to find a species with a consistent and well-documented migration pattern. We settled on geese because their predictable and regular migratory behavior makes them an ideal subject for studying trends over time.\nThe dataset I selected was originally created for a paper investigating the timing of geese migrations over a time span covering 2006 to 2009, followed by a three-year gap, and then 2013 and 2014. The data include 65 geese that were tagged and tracked across their migration routes, providing information on their movements throughout the year. This spatial data was meticulously documented in the original study, and it includes a visualization of the geese’s migration routes and stopover locations, which helped to inform my understanding of their migration patterns. The following graph comes from their paper.\n\n\n\nMigration tracks. Credits: Kölzsch et al., 2016\n\n\nFor my original project proposal, I aimed to build upon the original dataset by incorporating an additional environmental predictor variable—precipitation. I sourced precipitation data from NOAA, selecting a weather station located along the geese’s migration route. My hope was to explore whether precipitation levels might influence migration distances in any meaningful way. However, as I later discovered, the inclusion of this variable presented challenges. The spatial and temporal aspects of the precipitation data did not align well with the migration data, limiting its utility in the analysis.\n\n\n\n\n\n\n\nShow code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\n\nShow code\nlibrary(here)\n\n\nhere() starts at /Users/kjwong/MEDS/kimberleewong.github.io\n\n\nShow code\nlibrary(tmap)\n\n\n\nAttaching package: 'tmap'\n\nThe following object is masked from 'package:datasets':\n\n    rivers\n\n\nShow code\nlibrary(sf)\n\n\nLinking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE\n\n\nShow code\nlibrary(lubridate)\nlibrary(patchwork)\nlibrary(modelr)\nlibrary(broom)\n\n\n\nAttaching package: 'broom'\n\nThe following object is masked from 'package:modelr':\n\n    bootstrap\n\n\n\n\n\n\n# Movebank geese data\ngeese <- read_sf(here(\"posts/geese_migration/data/Migration timing in white-fronted geese (data from Klzsch et al. 2016)/points.shp\"))\n\n# NOAA precipitation data\nprecip <- read_csv(here(\"posts/geese_migration/data/precip.csv\"))\n\nRows: 3287 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): STATION, NAME\ndbl  (5): LATITUDE, LONGITUDE, ELEVATION, PRCP, SNWD\ndate (1): DATE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n# Add year column to both datasets\ngeese$year <- year(geese$timestamp)\n\nprecip$year <- year(precip$DATE)\n\n# Filter precipitation data to years we have data for geese\nprecip <- precip[precip$year %in% c(2006, 2007, 2008, 2009, 2013, 2014), ]\n\n# Create new dataset that has the average precipitation per year\nmean_precip <- precip %>%\n  group_by(year) %>%\n  summarise(mean_precip = mean(PRCP, na.rm = TRUE))\n\n\n\n\n\n# Create new dataframes for each year, so we can make a boxplot for each year\nearly_2006 <- geese %>% \n  filter(year == 2006)\n\nearly_2007 <- geese %>% \n  filter(year == 2007)\n\nearly_2008 <- geese %>% \n  filter(year == 2008)\n\nearly_2009 <- geese %>% \n  filter(year == 2009)\n\nlate_2013 <- geese %>% \n  filter(year == 2013)\n\nlate_2014 <- geese %>% \n  filter(year == 2014)\n\n\n\n\nIn order to make a linear regression model and visualize how migration distances are changing year to year, we’re going to create a new variable. By grouping by tag_ident (which is unique to each goose) and year, and using the max of st_distance, we can measure the distance between the two farthest points where a goose had been tagged that year. We will do this to the entire dataframe and to each year in order to make the boxplots.\n\ngeese_group <- geese %>% \n  group_by(tag_ident, year) %>% \n  summarise(\n    max_distance = max(st_distance(geometry, geometry), na.rm = TRUE)\n  ) %>% \n  ungroup() %>% \n  mutate(max_distance = as.numeric(max_distance))\n\n`summarise()` has grouped output by 'tag_ident'. You can override using the\n`.groups` argument.\n\ngeese_2006 <- early_2006 %>% \n  group_by(tag_ident, year) %>% \n  summarise(\n    max_distance = max(st_distance(geometry, geometry), na.rm = TRUE)\n  ) %>% \n  ungroup() %>% \n  mutate(max_distance = as.numeric(max_distance))\n\n`summarise()` has grouped output by 'tag_ident'. You can override using the\n`.groups` argument.\n\ngeese_2007 <- early_2007 %>% \n  group_by(tag_ident, year) %>% \n  summarise(\n    max_distance = max(st_distance(geometry, geometry), na.rm = TRUE)\n  ) %>% \n  ungroup() %>% \n  mutate(max_distance = as.numeric(max_distance))\n\n`summarise()` has grouped output by 'tag_ident'. You can override using the\n`.groups` argument.\n\ngeese_2008 <- early_2008 %>% \n  group_by(tag_ident, year) %>% \n  summarise(\n    max_distance = max(st_distance(geometry, geometry), na.rm = TRUE)\n  ) %>% \n  ungroup() %>% \n  mutate(max_distance = as.numeric(max_distance))\n\n`summarise()` has grouped output by 'tag_ident'. You can override using the\n`.groups` argument.\n\ngeese_2009 <- early_2009 %>% \n  group_by(tag_ident, year) %>% \n  summarise(\n    max_distance = max(st_distance(geometry, geometry), na.rm = TRUE)\n  ) %>% \n  ungroup() %>% \n  mutate(max_distance = as.numeric(max_distance))\n\n`summarise()` has grouped output by 'tag_ident'. You can override using the\n`.groups` argument.\n\ngeese_2013 <- late_2013 %>% \n  group_by(tag_ident, year) %>% \n  summarise(\n    max_distance = max(st_distance(geometry, geometry), na.rm = TRUE)\n  ) %>% \n  ungroup() %>% \n  mutate(max_distance = as.numeric(max_distance))\n\n`summarise()` has grouped output by 'tag_ident'. You can override using the\n`.groups` argument.\n\ngeese_2014 <- late_2014 %>% \n  group_by(tag_ident, year) %>% \n  summarise(\n    max_distance = max(st_distance(geometry, geometry), na.rm = TRUE)\n  ) %>% \n  ungroup() %>% \n  mutate(max_distance = as.numeric(max_distance))\n\n`summarise()` has grouped output by 'tag_ident'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\nShow code\n# Set y_limits so each y-axis is the same, and it is easier to compare\ny_limits <- range(geese_group$max_distance, na.rm = TRUE)\n\nb2006 <- ggplot(geese_2006, aes(x = \"2006\", y = max_distance)) +\n  geom_boxplot() +\n  stat_summary(fun = mean, geom = \"point\", color = \"red\", size = 3) +\n  scale_y_continuous(limits = y_limits) +\n  labs(y = \"Distance (meters)\") +\n    theme(axis.title.x = element_blank())  # Turn off x-axis label\n   \n\nb2007 <- ggplot(geese_2007, aes(x = \"2007\", y = max_distance)) +\n  geom_boxplot() +\n  stat_summary(fun = mean, geom = \"point\", color = \"red\", size = 3) +\n  scale_y_continuous(limits = y_limits) +\n    theme(\n    axis.title.x = element_blank(),  # Turn off x-axis label\n    axis.title.y = element_blank())\n\nb2008 <- ggplot(geese_2008, aes(x = \"2008\", y = max_distance)) +\n  geom_boxplot() +\n  stat_summary(fun = mean, geom = \"point\", color = \"red\", size = 3)  +\n  scale_y_continuous(limits = y_limits) +\n    theme(\n    axis.title.x = element_blank(),  # Turn off x-axis label\n    axis.title.y = element_blank())\n\nb2009 <- ggplot(geese_2009, aes(x = \"2009\", y = max_distance)) +\n  geom_boxplot() +\n  stat_summary(fun = mean, geom = \"point\", color = \"red\", size = 3) +\n  scale_y_continuous(limits = y_limits) +\n    theme(\n    axis.title.x = element_blank(),  # Turn off x-axis label\n    axis.title.y = element_blank())\n\nb2013 <- ggplot(geese_2013, aes(x = \"2013\", y = max_distance)) +\n  geom_boxplot() +\n  stat_summary(fun = mean, geom = \"point\", color = \"red\", size = 3) +\n  scale_y_continuous(limits = y_limits) +\n    theme(\n    axis.title.x = element_blank(),  # Turn off x-axis label\n    axis.title.y = element_blank())\n\nb2014 <- ggplot(geese_2014, aes(x = \"2014\", y = max_distance)) +\n  geom_boxplot() +\n  stat_summary(fun = mean, geom = \"point\", color = \"red\", size = 3) +\n  scale_y_continuous(limits = y_limits) +\n    theme(\n    axis.title.x = element_blank(),  # Turn off x-axis label\n    axis.title.y = element_blank())\n\n(b2006 | b2007 | b2008 | b2009 | b2013 | b2014) + \n  plot_annotation(\n  title = \"Yearly Distribution of Maximum Migration Distances of Geese\")\n\n\n\n\n\nIn these box plots the red dot represents the mean. There is noticeable variability in migration distances across years. Some years, 2007 and 2008, have larger interquartile ranges, while others, 2013, have more tightly clustered data. The 2014 data appears to have a few outliers on the lower end.\n\n\n\nFor the first linear regression model, I’m only gonna run the year as the predictor.\n\nyear_mod <- lm(max_distance ~ year, geese_group)\n\nggplot(geese_group, aes(x = year,\n                  y = max_distance)) +\n  geom_point() +\n  geom_smooth(se = FALSE,\n              method = lm) +\n  theme(aspect.ratio = 1) + \n  labs(title = \"Linear Regression Model of Maximum Migration for Geese\",\n       x = \"Year\",\n       y = \"Max Distance (meters)\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nsummary(year_mod)\n\n\nCall:\nlm(formula = max_distance ~ year, data = geese_group)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2030506  -282246    39621   245984  2060253 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)\n(Intercept) -29660636   66157768  -0.448    0.655\nyear            16140      32888   0.491    0.625\n\nResidual standard error: 851300 on 75 degrees of freedom\nMultiple R-squared:  0.003201,  Adjusted R-squared:  -0.01009 \nF-statistic: 0.2409 on 1 and 75 DF,  p-value: 0.625\n\n\nAfter looking at both the results of the visualization and the summary of the model, it is very much inconclusive. While the graph seems to show an increase in maximum migration distances (albeit very slight), the summary shows that the p-value for the year predictor is 0.625. This is much too high for this variable to be considered signficant. In addition to this, the R-squared value is 0.0032, and this means that the model explains only 0.32% of the variability in migration distances.\n\n\n\nLet’s plot the residuals to see if there are any blaring red flags about this choice of model.\n\nggplot(geese_group, aes(x = year, y = resid(year_mod))) +\n  geom_point() +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"red\") +\n  labs(title = \"Residuals of the Linear Model\",\n       x = \"Year\",\n       y = \"Residuals\") +\n  theme_minimal()\n\n\n\n\nThe residuals appear to be randomly distributed along the x-axis (years). This suggests that the relationship between predictors and the response variable is reasonably linear. There seem to be clusters of residuals near certain years, which is likely due to an uneven distribution of data across years. There are residuals that are very large, and these could be outliers.\n\n\n\nLet’s try adding precipitation to the model to see if we can get a more significant relationship.\n\nmerged_data <- merge(geese_group, mean_precip, by = \"year\", all.x = TRUE)\n\n# Make year variable is treated as a categorical variable\nmerged_data <- merged_data %>% mutate(year = as.factor(year)) \n\nprecip_mod <- lm(max_distance ~ mean_precip + year, data = merged_data)\n\nsummary(precip_mod)\n\n\nCall:\nlm(formula = max_distance ~ mean_precip + year, data = merged_data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2139000  -216127    17442   295893  1746955 \n\nCoefficients: (1 not defined because of singularities)\n            Estimate Std. Error t value Pr(>|t|)\n(Intercept)  7510783    5128234   1.465    0.147\nmean_precip -1812342    2057486  -0.881    0.381\nyear2007     -131332     443555  -0.296    0.768\nyear2008      113113     488158   0.232    0.817\nyear2009     -801156     751133  -1.067    0.290\nyear2013     -148566     297875  -0.499    0.619\nyear2014          NA         NA      NA       NA\n\nResidual standard error: 852700 on 71 degrees of freedom\nMultiple R-squared:  0.05328,   Adjusted R-squared:  -0.01339 \nF-statistic: 0.7992 on 5 and 71 DF,  p-value: 0.5539\n\n\nUnfortunately, even after precipitation to the model, none of the predictors’ p-values are small enough to be considered signficant. While the R-squared did increase quite a bit, the adjusted R-squared was practically unchanged.\n\n\n\n\nTo sum up our results, in both linear models (first: year as only predictor, second: year as a categorical predictor and mean precipitation as a continous one) there is no significant p-value found. In the first model, the p-value for year as a predictor was 0.625, indicating a 62.5% chance that the result was due to chance. The second model similarly shows p-values that are too high. As a result, I cannot reject the null hypothesis. There are a few possibilities to why this outcme could have occurred. Below describes the limitations of the data. The box plots that were created do show variability throughout the years in maximum migration distance, but a confident relationship cannot be determined.\n\n\nWhile the dataset from Movebank offers valuable insights into geese migration patterns, several limitations must be acknowledged, as they could affect the robustness and interpretation of the analysis:\n\nTemporal Gaps in the Data The dataset spans 2006 to 2009 and then skips three years before resuming for 2013 and 2014. This temporal gap introduces potential biases, as it excludes data from years that might have exhibited different migration behaviors due to environmental or ecological changes. Consequently, the uneven time distribution reduces the ability to assess continuous trends over time.\nUneven Sample Size Across Years The number of geese tracked varies significantly between years, leading to imbalances in the dataset. This uneven distribution may skew the results, as years with fewer data points have less statistical weight, potentially masking real patterns or exaggerating anomalies in years with more extensive data coverage.\nLack of Comprehensive Environmental Variables While the inclusion of precipitation data was a step toward understanding environmental influences, the variable proved challenging to integrate effectively. The NOAA station data was limited in its spatial relevance to the geese’s migration routes and lacked temporal precision. Other critical environmental factors, such as temperature, wind patterns, or habitat changes along the migration path, were not included, which limits the ability to fully understand the drivers behind migration distances.\nPotential Impact of External Factors The original study mentioned that some geese were lost during hunting seasons. This human-induced mortality could affect migration data by reducing sample sizes or influencing the observed migration distances of tagged individuals.\nSimplification of Migration Distance Calculation The migration distance was calculated as the maximum distance traveled by each goose during the year, assuming that this represented the total migration length. This approach does not account for potential deviations, stopovers, or detours in the migration path, which might lead to underestimation or overestimation of actual migration effort.\nBias Toward Surviving Individuals The data inherently focuses on geese that completed their migrations and excludes individuals that may have died en route or failed to migrate. This survivorship bias could paint an incomplete picture of the migration patterns and the challenges faced by the population.\nLimited Geographic and Population Scope The dataset tracks a specific subset of the goose population in a defined geographic area. Findings from this subset may not be generalizable to other populations or regions where geese face different environmental pressures or migratory challenges.\n\nAcknowledging these limitations is essential for interpreting the results and framing conclusions. Future studies could aim to fill data gaps, integrate additional environmental variables, and explore alternative methods for calculating migration distances to gain a more comprehensive understanding of the factors influencing geese migration.\n\n\n\n\n\n\n\n\n\n\n\nData:\nCitation:\n\n\n\n\nGeese Migration Data\nKölzsch, A., Müskens, G. J. D. M., Kruckenberg, H., Glazov, P., Weinzierl, R., Nolet, B. A., & Wikelski, M. (2016). Towards a new understanding of migration timing: slower spring than autumn migration in geese reflects different decision rules for stopover use and departure. Oikos, 125(10), 1496–1507. https://doi.org/10.1111/oik.03121\n\n\nPrecipitation Data\nClimate Data Online (CDO), National Climatic Data Center (NCDC). (n.d.). Www.ncei.noaa.gov. https://www.ncei.noaa.gov/cdo-web/search"
  },
  {
    "objectID": "delete-later/practice.html",
    "href": "delete-later/practice.html",
    "title": "Kimberlee Wong",
    "section": "",
    "text": "Here is my level one header\nHere is my first paragraph\nHere is my second paragraph, where you can read more about MEDS.\nThis is very important text!"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "Shifts in Geese Migration\n\n\n\nr\n\n\nMEDS\n\n\nStatistics\n\n\nQuarto\n\n\n\nThis project’s goal is to determine whether geese migration distances are changing over time.\n\n\n\nKimmy Wong\n\n\nDec 13, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalysis of the 2017 Thomas Fire\n\n\n\nPython\n\n\nMEDS\n\n\nSpatial-Analysis\n\n\nQuarto\n\n\n\nThis project’s goal is to visually explore the region affected by the Thomas Fire across Ventura and Santa Barbara counties in 2017.\n\n\n\nKimmy Wong\n\n\nDec 4, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  }
]